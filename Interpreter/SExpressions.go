// ================================================================================================================== //
// Auto generated file created at Thursday, 20-Jan-22 11:59:27 EST. Do not edit this file, edit generation code.
// ================================================================================================================== //

package interpreter

import "fmt"

type SExpression interface {
	GetName()
}

/*
The most elementary type of S-Expression is the atomic symbol.

Definition: An atomic symbol is a string of no more than thirty numerals and capital
letters; the first character must be a letter.

Examples:
	A
	APPLE
	PART2
	EXTRALONGSTRINGOFLETTERS
	A4B66XYZ2
*/
type Atom struct {
	name string
}

func (a Atom) GetName() {
	fmt.Printf("Atom: %s\n", a.name)
}

type LParen struct{}

func (a LParen) GetName() { 
	fmt.Println("LParen")
}

type RParen struct{}

func (a RParen) GetName() { 
	fmt.Println("RParen")
}

type Dot struct{}

func (a Dot) GetName() { 
	fmt.Println("Dot")
}

type LSquareBracket struct{}

func (a LSquareBracket) GetName() { 
	fmt.Println("LSquareBracket")
}

type RSquareBracket struct{}

func (a RSquareBracket) GetName() { 
	fmt.Println("RSquareBracket")
}

type Semicolon struct{}

func (a Semicolon) GetName() { 
	fmt.Println("Semicolon")
}

// ================================================================================================================== //
// Auto generated file created at Friday, 21-Jan-22 10:32:42 EST. Do not edit this file, edit generation code.
// ================================================================================================================== //

package interpreter

import (
	"bytes"
	"fmt"
)

type SExpression interface {
	GetName() string
	PrettyPrint() string
}

/*
The most elementary type of S-Expression is the atomic symbol.

Definition: An atomic symbol is a string of no more than thirty numerals and capital
letters; the first character must be a letter.

Examples:
	A
	APPLE
	PART2
	EXTRALONGSTRINGOFLETTERS
	A4B66XYZ2
*/
type Atom struct {
	name string
}

func (a Atom) GetName() string {
	return "Atom"
}

func (a Atom) PrettyPrint() string {
	return fmt.Sprintf(" %s ", a.name)
}

type List struct {
	sexps []SExpression
}

func (l List) GetName() string {
	return "List"
}

func (l List) PrettyPrint() string {
	var buffer bytes.Buffer
	buffer.WriteString("(")
	for _, val := range l.sexps {
		buffer.WriteString(val.PrettyPrint())
	}
	buffer.WriteString(")")

	return buffer.String()
}

type LParen struct{}

func (a LParen) GetName() string {
	return "LParen"
}
func (a LParen) PrettyPrint() string {
	return "LParen"
}

type RParen struct{}

func (a RParen) GetName() string {
	return "RParen"
}
func (a RParen) PrettyPrint() string {
	return "RParen"
}
